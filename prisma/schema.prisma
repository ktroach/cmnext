// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
  output   = "../src/db/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String?
  description   String?
  token         String?
  prefix        String?
  firstName     String?
  middleName    String?
  lastName      String?
  suffix        String?
  preferredName String?
  gender        String?
  birthDate     DateTime?
  local         String?
  timeZone      String?
  lastLoginTime DateTime?
  contact       UserContact?
  role          UserRole     @default(USER)
  profile       UserProfile?
  posts         Post[]
  pages         Page[]
  accounts      Account[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model Account {
  id         Int       @id @default(autoincrement())
  name       String
  accountRef String    @default(cuid())
  admin      User      @relation(fields: [adminId], references: [id])
  adminId    Int
  subsites   Subsite[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Subsite {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String?
  subsiteRef      String    @default(cuid())
  posts           Post[]
  pages           Page[]
  logoUrl         String?
  logoSvg         String?
  navConfig       String?
  headerConfig    String?
  footerConfig    String?
  siteVisibility  String?
  siteLanguage    String?
  domainName      String?
  domainStatus    String?
  domainCreatedAt DateTime?
  account         Account   @relation(fields: [accountId], references: [id])
  accountId       Int       @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  overview    String        @default("")
  content     String?
  slug        String?
  coverImage  String?
  status      ContentStatus @default(DRAFT)
  published   Boolean       @default(false)
  publishedAt DateTime?
  deleted     Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  categories  Category[]
  tags        Tag[]
  subsite     Subsite       @relation(fields: [subsiteId], references: [id])
  subsiteId   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

model Page {
  id             Int           @id @default(autoincrement())
  title          String        @db.VarChar(255)
  overview       String        @default("")
  content        String?
  slug           String?
  status         ContentStatus @default(DRAFT)
  publishedAt    DateTime?
  published      Boolean       @default(false)
  coverImage     String?
  layoutTemplate String?
  theme          String?
  metaData       String?
  seoSettings    String?
  analyticsCodes String?
  showOnNav      Boolean       @default(true)
  deleted        Boolean       @default(false)
  author         User          @relation(fields: [authorId], references: [id])
  authorId       Int
  categories     Category[]
  tags           Tag[]
  subsite        Subsite       @relation(fields: [subsiteId], references: [id])
  subsiteId      Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  pageOrder      Int           @default(-1)  
  parentPageId   Int           @default(-1)
  pageType       String        @default("")
}

model UserProfile {
  id         Int       @id @default(autoincrement())
  bio        String?
  active     Boolean   @default(true)
  slug       String?
  imageUrl   String?
  subsiteRef String    @default("")
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum UserRole {
  USER
  ADMIN
  AUTHOR
  CONTRIBUTOR
  SUPERADMIN
}

model ContactAddress {
  id         Int         @id @default(autoincrement())
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  contact    UserContact @relation(fields: [contactId], references: [id])
  contactId  Int         @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
}

model ContactEmail {
  id                 Int         @id @default(autoincrement())
  primaryEmail       String
  primaryEmailType   String
  secondaryEmail     String?
  secondaryEmailType String?
  tertiaryEmail      String?
  tertiaryEmailType  String?
  contact            UserContact @relation(fields: [contactId], references: [id])
  contactId          Int         @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt
}

model ContactPhone {
  id                 Int         @id @default(autoincrement())
  primaryPhone       String
  primaryPhoneType   String
  secondaryPhone     String?
  secondaryPhoneType String?
  tertiaryPhone      String?
  tertiaryPhoneType  String?
  contact            UserContact @relation(fields: [contactId], references: [id])
  contactId          Int         @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt
}

model ContactWebsite {
  id               Int         @id @default(autoincrement())
  primaryUrl       String
  primaryUrlType   String
  secondaryUrl     String?
  secondaryUrlType String?
  tertiaryUrl      String?
  tertiaryUrlType  String?
  contact          UserContact @relation(fields: [contactId], references: [id])
  contactId        Int         @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
}

model UserContact {
  id        Int             @id @default(autoincrement())
  email     ContactEmail?
  phone     ContactPhone?
  address   ContactAddress?
  website   ContactWebsite?
  user      User            @relation(fields: [userId], references: [id])
  userId    Int             @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  posts       Post[]
  pages       Page[]
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  posts       Post[]
  pages       Page[]
}

enum ContentStatus {
  DRAFT
  PENDING
  REVIEW
  PUBLISHED
}
